//
// Foundation Variables
//

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.
$base-font-size: 100% !default;

// $base-line-height is 24px while $base-font-size is 16px
// $base-line-height: 150%;

// This is the default html and body font-size for the base em value.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be a different size and not have it effect grid size too,
// set the value of $em-base to $base-font-size ($em-base: $base-font-size;)
$em-base: 16 !default;

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value)  {
  $value: strip-unit($value) / strip-unit($em-base) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#)
// Just enter the number, no need to mention "px"
@function emCalc($values...) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 { @return convert-to-em(nth($values, 1)); }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i)));
  }
  @return $emValues;
}


.row {
	width: 73.5%;
	max-width: 67em !important;
}
.main-header {
  
}

.video_column {
	background-color: #484746;
	padding-bottom: 16px;
}

img.video {
	width: 100%;
	margin-top: 20px;
	margin-bottom: 10px;
	margin-left: auto;
	margin-right: auto;
}

.video-header {
	color: #ede8d1;
	text-transform: uppercase;
	text-align: center;
	letter-spacing: 2px;
}

.vid-desc {
	color: #ede8d1; 
	text-align: center;
}

#ribbon {
	width: 100% !important;
	background-color: #fff;
	border-top-style: solid;
	border-top-width: 8px;
	border-top-color: #d0112b;
	border-bottom-style: solid;
	border-bottom-width: 8px;
	border-bottom-color: #d0112b;
	padding: 30px 0 30px 0;
	-moz-box-shadow:    0 4px 15px -2px #000;
  -webkit-box-shadow: 0 4px 15px -2px #000;
  box-shadow:         0 4px 15px -2px #000;
  position: relative;
  z-index: 1;

	.care-border {
  	border-top-style: solid;
	  border-top-width: 3px;
	  border-top-color: #000;
	  border-bottom-style: solid;
	  border-bottom-width: 3px;
	  border-bottom-color: #000;
	  float: left !important;
	  padding-left: 1em !important;
	  padding-right: 1em !important;
	}

	h2.care-advocate {
		text-transform: uppercase;
		font-weight: 400;
		letter-spacing: 3px;
		color: #cf0a2c;
		margin-bottom: 0px;
	}

	p.ribbon-text {
		text-align: center;
	}

	.phone-number {
		margin-bottom: 11px;
	}
}

.center {
	text-align: center;
}

.rule-padding {
	padding-top: 40px;
	padding-bottom: 12px;
}

.strong-now {
	font-size: emCalc(30) !important;
	color: #484746;
	text-transform: uppercase;
	font-weight: 400;
	letter-spacing: 13px;

}

.strong-future {
	font-size: remCalc(50) !important;
	color: #cf0a2c;
	margin-bottom: -4px;
	margin-top: -20px;
	text-transform: uppercase;
	letter-spacing: 13px;
}

p.footer-text {
	text-align: left;
	padding-top: emCalc(50);
	margin-left: 27px;
}

span.red-bold {
	color: #cf0a2c;
	font-weight: bold;
}

.triangle {

}

.footer {
	background-color: #ede8d1;
}

.gray {
	background-color: #484746;
}

.footer-logo {
	padding-top: emCalc(50);
	padding-bottom: emCalc(50);
}

// @media only screen and (min-width: 768px) {
// 	.has-border {
// 		border-right-style: solid;
// 		border-right-width: 2px;
// 		border-right-color: #d9cf99;
// 	}
// }

@media only screen and (max-width: 768px) {
	.row {
		width: 100% !important;
	}
}
